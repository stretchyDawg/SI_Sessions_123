This is the mock practicum for today's SI Review Session. If any instructions are unclear or confusing, ask your 
peers or any of the SIs. You are allowed to work in groups for this practicum, but please note that that is not 
allowed for the final. Take this as an opportunity to talk to people at your table about the concepts needed for 
these problems, and also work together on this problem, it will benefit you more than you think :) 

We will go over it together afterward... good luck!


PAPAS PANCAKERIA:

1: A Pancake is a food (..duh). There are multiple types on pancakes (chocolate chip, blueberry, raspberry, 
etc...). Pancakes also have a weight (in lbs, as a float) and a price (as a float). A pancake is less than another 
pancake if its weight is less than the other pancake's weight. If their weight is the same then order them alphabetically. 
Pancakes should be able to be put in setsâ€¦ (if you are confused on what this means then ask your peers or the SIs 
for some help). If it helps you for manual testing, create some __str__ or __repr__ methods.

Make a few global variable pancakes, here are some examples:
PLAIN_PANCAKE = Pancake(<insert your parameters here>)   
BLUEBERRY_PANCAKE = Pancake(...)
RASPBERRY_PANCAKE = Pancake(...)
NUTELLA_PANCAKE = Pancake(...)
...

When making your pancakes, follow some standards when making prices (this is required for #4):
Plain Pancake: $2.50
Blueberry Pancake: $3.00
Mini Pancake: $1.50
Nutella Pancake: $5.50
Any other pancake: $4.00

If these examples/instructions are confusing feel free to ask for clarification.


2: An Order contains the pancakes requested and the amount of pancakes requested. For example, an order should be able to 
articulate that 2 Chocolate Chip Pancakes and 1 Blueberry Pancake is requested. 

Find a data structure to represent this. You can pass in this data structure in the main function, (say you used a list, 
you can just pass in the list representing the pancakes in the main function). If it helps, you can manually test it in 
the main function, or if you wanna get crazy then make some unit tests! 

Requirements:
- There should be a method that returns the total price of the order 
- There should be a method that returns the total weight. 
- There should be a __str__ method that returns the data in this format:
    1 x Blueberry Pancake
    2 x Raspberry Pancake
    Total cost: <amount>lbs
    Total weight: $<amount>


3: A Pancakeria is a restaurant that takes in orders. They take in orders in first-come-first-serve manner (you can simply 
pass in these orders in the main function when making a Pancakeria instance). They serve pancakes in an 'eatable' fashion. 
Pancakes are eaten from the top down. After creating your __init__ function, provide these functionalities:
- A print_next_order method that prints the next order in this format:
    Next Order:
        <next order information>
- A serve pancake method that returns the pancakes requested from the order next in line in an 'eatable' fashion (pancakes 
are eaten from the top down)


4: The local elementary school is having a Pancake party! They have a LOT of orders to make (10!), and instead of sending in 
their orders in a traditional fashion, they're sending their order as one submission in as a csv file in this format:

amount,type,weight
3,Plain,1.23
4,Plain,3.42
2,Blueberry,5.67
5,Nutella,1.23
6,Plain,4.75
1,Mini,24.9
2,Blueberry,1.2
3,Plain,6.8
1,Rainbow,3.4
4,Plain,5.6
(for testing in the main() function, i recommend you copy this and paste it into a order.csv file, make sure there is no
whitespace in the csv file)

Make an 'order_csv(filename)' function that, based on this data, creates an Order instance with every pancake. The order should 
print in this format (assuming you have the correct __str__ method for the Order class):
3x Plain
4x Plain
2x Blueberry
5x Nutella
6x Plain
1x Mini
2x Blueberry
3x Plain
1x Rainbow
4x Plain
Total Weight: 136.85999999999999lbs #i know it looks weird, but its fine
Total Price: $95.0

