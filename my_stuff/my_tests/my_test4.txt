This practicum comprises 4 problems worth a total of 50 points. You may choose
to attempt the problems in any order, but the suggested order is listed below.

The ONLY comment you are required to write in each module is a file comment 
including your full name. You DO NOT need to write single-line comments or
docstrings unless you want to.

You are restricted to using ONLY features of the Python language that were 
discussed in class lectures and in the homework assignments. If you use any 
features that were not used in class or homework assignments you will receive a
0 for the problem.

Implement your solution in the "practicum.py" file that has been provided to 
you. Feel free to write helper functions as needed.

0. A pytest unit test that has been provided to you in a file named 
   "practicum_test.py". You can use this test to verify that the functions you 
   write to solve most of the problems on this exam are working as expected.
   
   If you open the file, you will see that the tests have been commented out.
   This is so that you are not overwhelmed by syntax errors and failing tests
   every time you run the unit test. You are encouraged to uncomment the tests
   one-at-a-time as you work through the practicum. Once you get a test to pass,
   move on to the next one.

   If you cannot figure out how to get one of the tests to pass, comment it 
   out.

1. A toy capsule is a small (about 2") plastic ball that can be opened to 
   reveal a tiny toy inside (also plastic). Every toy capsule has the following 
   attributes:
   - color (a string) e.g. 'red'
   - toy (a string) e'g' 'rocking Horse'

   Create a Python class to represent a toy capsule. It must include the 
   following features:
   - As always, use proper encapsulation for all attributes.
   - A toy capsule is initialized with the color and toy.
   - Accessors for all attributes.
   - A compact string representation in the format "<color>(<toy>)" e.g. 
    "Red(Rocking Horse)".
   - A more detailed string representation in the format "A <color> toy capsule
     containing a <toy name>." For example "A red toy capsule containing a 
     rocking horse." For 5 bonus points, your function should use "a" or "an" 
     as appropriate.

2. Toy collectors often keep their toys in the original packaging to keep it
   safe and in mint condition. They also like to sort their toys in some way. 
   Update your toy capsule class so that toy capsules can be arranged in 
   alphabetical order based on the kind of toy of the capsule. If the sequence 
   contains more than one of the same kind of toy, they should be sorted by 
   color. For example, an Orange capsule would be sorted before a Red capsule 
   if they both contain the same kind of toy.

3. A toy capsule dispenser is a simple mechanical device often found outside of
  retail establishments like toy stores or grocery stores. Customers insert 
  coins and turn a crank to dispense toy capsules one at a time. See the 
  provided image for a reference. Toy capsule dispensers have the following 
  attributes:
  - balance i.e. the amount of money that has been inserted into the machine 
    in whole dollars.
  - capsules i.e. the collection of capsules that the machine will dispense.

  Create a Python class that represents a toy capsule dispenser. It must 
  include the following features:
  - As always, use proper encapsulation for all attributes.
  - A toy capsule dispenser is initialized with a $0 balance and is empty (it
    does not contain any toy capsules). You should choose the best data 
    structure to store the capsules.
  - An accessor for the current balance.
  - A method named "is_empty" that returns True if the dispenser is empty (it
    does not contain any toy capsules) and False otherwise.
  - A method named "reload" that declares a parameter for a collection of toy
    capsules and COPIES the capsules into the dispenser. DO NOT use the data 
    structure that is passed into the method to store the toy capsules in the
    dispenser!
  - A method named "dispense" that adds $1 to the balance and removes and 
    returns one of the toy capsules in the dispenser. For 5 bonus points raise
    a ValueError if the dispenser is empty. 

4. Toy collectors are often interested in collecting one of each new toy 
   available from a dispenser. Therefore, two toy capsules are considered equal
   if they contain the same kind toy, regardless of color. For example, a Red 
   toy capsule containing a Superball would be considered equal to a Blue toy 
   capsule that also contained a Superball. If a collector gets two of the same
   toy from a dispenser, they will only keep one (and discard or sell the 
   other).

   Define a new function named "collect_toys" that declares a parameter for a
   dispenser and dispenses toys until the dispenser is empty. Return a 
   collection of the unique toy capsules dispensed by the dispenser. 
   
   Your function MUST run in linear time to receive credit for this problem. 
   You will need to add functionality to your toy capsule class to solve this 
   problem.



