This practicum comprises 4 problems worth a total of 70 points. You may choose
to attempt the problems in any order, but the suggested order is listed below.

The ONLY comment you are required to write in each module is a file comment 
including your full name. You DO NOT need to write single-line comments or
docstrings unless you want to.

You are restricted to using ONLY features of the Python language that were 
discussed in class lectures and in the homework assignments. If you use any 
features that were introduced later (or not at all) you will receive a 0 for
the problem.

Implement your solution in the "practicum.py" file that has been provided to 
you. Feel free to write helper functions as needed.

0. A pytest unit test that has been provided to you in a file named 
   "practicum_test.py". You can use this test to verify that the functions you 
   write to solve most of the problems on this exam are working as expected.
   
   If you open the file, you will see that the tests have been commented out.
   This is so that you are not overwhelmed by syntax errors and failing tests
   every time you run the unit test. You are encouraged to uncomment the tests
   one-at-a-time as you work through the practicum. Once you get a test to pass,
   move on to the next one.

   If you cannot figure out how to get one of the tests to pass, comment it 
   out.

1. The Euclidean Distance between two points is the length of the line segment
   connecting the two points. Given two points (x1, y1) and (x2, y2), the 
   Euclidean Distance d can be computed as follows:

   d = ((x1 - x2)^2 + (y1 - y2)^2)^0.5

   The above formula computes the distance between two-dimensional points, but
   the formula can be used for any number of dimensions. For example, here is 
   the formula for three dimensions (x1, y1, z1) and (x2, y2, z2):

   d = ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)^0.5

   Define a function named "euclidean_distance" that declares parameters for
   two sequences that represent points in any number of dimensions. If the 
   number of coordinates in the two points differs, return None.

2. A pangram is a phrase that includes every letter of the alphabet at least 
   once. Some letters may appear more than once. Examples of pangrams include:

   "Quick zephyrs blow, vexing daft Jim." (29 letters)
   "The quick brown fox jumps over a lazy dog." (33 letters)
   "JCVD might pique a sleazy boxer with funk." (34 letters)

   Write a function named "is_pangram" that declares a parameter for a string 
   and returns True if the string is a pangram and False if it is not. For full
   credit your function must run in O(n) time.

3. The Phonetic Alphabet is a way of verbally communicating the spelling of a
   word or phrase by replacing each letter with a word that is clearly spoken
   aloud. For example, LOVE translates to "Lima Oscar Victor Papa".

   You have been provided with a list of words in the Phonetic Alphabet called
   PHONETIC_ALPHABET that contains the complete Phonetic Alphabet.

   Define a function named "phonetic_translation" that declares a parameter for
   a string and returns the string translated into the phonetic alphabet (as a 
   list of words). Do not include any characters that are not part of the 
   alphabet (e.g. spaces, punctuation, etc.) 
   
   For full credit your solution must not use a linear search over the phonetic
   alphabet for each letter in the string. 
   

4. Define a function named "words_by_letter" that declares a parameter for a
   string. Create and return a data structure that, given a letter, will return
   the unique words in the string that begin with that letter. For full credit 
   your function must run in O(n) time.
   
   For example, given:
   
   "The cat in the hat is back with a bright blue bat out in the back" 
   
   The function should return the data structure containing (not necessarily in
   this order):

   Letter  Unique Words
   "a"     "a"
   "c"     "cat"
   "b"     "back", "bright", "blue", "bat"
   "h"     "hat"
   "i"     "in", "is"
   "o"     "out"
   "t"     "the"
   "w"     "with"